from aiogram import Dispatcher
from keyboards import *
from user_handlers.handler import order_data
from user_handlers.handler import del_mes, delete_message_from_dict


async def delete_from_order(query: types.CallbackQuery):
    sqlite_db.delete_from_order(order_data[f'{query.from_user.id}'])
    message = await query.bot.send_message(text='*–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ!*'
                                                '<b>PEPSIBOT</b>\n'
                                                '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å:\n'
                                                '<b>üí≤ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è</b> - —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç\n'
                                                '                       –∞–±–æ —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. \n'
                                                '<b>üóÉ –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å</b> - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ\n'
                                                '                              –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n'
                                                '<b>üìù –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è</b> - —â–æ–± —Ä–æ–∑—É–º—ñ—Ç–∏ –∫–æ–º—É\n'
                                                '                       –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n',
                                           reply_markup=menu_kb(),
                                           chat_id=query.message.chat.id)
    del_mes.add_message(chat_id=query.message.chat.id, message_id=message)
    await delete_message_from_dict(chat=query.message.chat.id)


async def add_in_list_orders(query: types.CallbackQuery, callback_data: dict):
    await query.answer(text='–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!')
    sqlite_db.order_verification(callback_data['id'])
    message = await query.bot.send_message(text='*–©–µ –æ–¥–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?*'
                                                '<b>PEPSIBOT</b>\n'
                                                '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å:\n'
                                                '<b>üí≤ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è</b> - —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç\n'
                                                '                       –∞–±–æ —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. \n'
                                                '<b>üóÉ –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å</b> - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ\n'
                                                '                              –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n'
                                                '<b>üìù –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è</b> - —â–æ–± —Ä–æ–∑—É–º—ñ—Ç–∏ –∫–æ–º—É\n'
                                                '                       –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n',
                                           chat_id=query.message.chat.id,
                                           reply_markup=menu_kb())
    del_mes.add_message(chat_id=query.message.chat.id, message_id=message)
    await delete_message_from_dict(chat=query.message.chat.id)


async def order_continue(query: types.CallbackQuery):
    message = await query.bot.send_message(text='1. –ù–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å <b>üõçÔ∏è –¢–æ–≤–∞—Ä–∏</b>, —â–æ–± –ø–æ—á–∞—Ç–∏ —Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n'
                                                '2. <b>üõí –ö–æ—Ä–∑–∏–Ω–∞</b>, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n'
                                                '3. <b>‚öô –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</b>, —â–æ–± –≤–Ω–µ—Å—Ç–∏ —Å–≤–æ—ó –ø–æ–±–∞–∂–∞–Ω–Ω—è —á–∏ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏.',
                                           chat_id=query.message.chat.id,
                                           reply_markup=order_menu_kb())
    del_mes.add_message(chat_id=query.message.chat.id, message_id=message)
    await delete_message_from_dict(chat=query.message.chat.id)


def register_order_final(dp: Dispatcher):
    dp.register_callback_query_handler(add_in_list_orders, Cat_KB.filter(action='add_full_order'))
    dp.register_callback_query_handler(delete_from_order, Cat_KB.filter(action='delete_from_order'))
    dp.register_callback_query_handler(order_continue, Cat_KB.filter(action='continue_to_order'))
